match(v1, v2) {
    case (Number v1 && Number v2) {
        cint u1 = isFixnum(v1)? fixnum_to_cint(v1) : flonum_to_cint(v1);
        cint u2 = isFixnum(v2)? fixnum_to_cint(v2) : 
        flonum_to_cint(v2);
        cint u1 = NumberToCint(v1);
        cint u2 = NumberToCint(v2);
        return CintToNumber(u1 & u2);
    }
}

externC constant JSValue Fixnum_Zero = FIXNUM_ZERO
externC constant JSValue Flonum_Infinity = ggconsts.g_flonum_infinity;
externC constant JSValue Flonum_NegInfinity
externC constant JSValue Flonum_Nan

externC isinf : cdouble -> cint
externC isnan : cdouble -> cint
externC CintToCdouble : cint -> cdouble    // キャスト（関数を呼び出すわけではない）

div : (JSValue, JSValue) -> Number
div (v1, v2) {
    match (v1, v2) {
        case (Fixnum v1 && Fixnum v2) {
            // (Number, Number) でも代用できるため，コードサイズを重視する場合は必要ない
            cint n1 = NumberToCint(v1);
            if (v2 == FIXNUM_ZERO) {
              // FIXNUM_ZERO は DSL の定数
              if (n1 > 0) {
                  return Flonum_Infinity;
              } else if (n1 == 0) {
                  return Flonum_Nan;
              } else {
                  return Flonum_NegInfinity;
              }
            } else {
              cint n2 = NumberToCint(v2);
              cint s = n1 / n2;
              if (s * n2 == n1) {
                  return CintToNumber(s);
              } else {
                cdouble r = CintToCdouble(n1) / CintToCdouble(n2);
                return r;
              }
            }
        }
        case (Number v1 && Number v2) {
            cdouble n1 = NumberToCdouble(v1);
            cdouble n2 = NumberToCdouble(v2);
            cdouble d = n1 / n2;
            if (isinf(d)) {
                return d > 0 ? Flonum_Infinity : Flonum_NegInfinity;
            } else if (isnan(d)) {
                return Flonum_Nan;
            } else {
                return CdoubleToNumber(d);
            }
        }
        case (Number v1 && JSValue v2) {
            cint u2 = toNumber(v2);
            return div(v1, u2);
        }
        case (JSValue v1 && JSValue v2) {
            cint u1 = toNumber(v1);
            return div(u1, v2);
        }
    }
}

externC needContext
get_opcode : () -> cint

externC needContext triggerGC changeContext
call_function : (Function, cint, cint) -> void

externC needContext triggerGC changeContext
call_builtin : (Function, cint, cint, cint) -> void

vmInstruction noIncPc
call : (JSValue, cint) -> 
call (fn, nargs) {
    cint op = get_opcode();
    cint sendp = (op != CALL);
    cint newp = (op == NEWSEND);

    match (fn) {
        case (Function fn) {
            // set_fp();   // 自動で出力できる?
            // set_pc();   // 自動で出力できる?
            call_function(fn, nargs, sendp);
        }
        case (Builtin fn) {
            // set_fp();   // 自動で出力できる?
            // set_pc();   // 自動で出力できる?
            call_builtin(fn, nargs, sendp, newp);
        }
    }
}