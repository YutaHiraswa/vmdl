pattern ffs v = Fixnum v || Flonum v || Special v
pattern ffss v = Fixnum v || Flonum v || Special v || String v
pattern object v = SimpleObject v || Array v || Function v || Builtin v || SimpleIterator v || Iterator v || Regexp v || StringObject v || NumberObject v || BooleanObject v
pattern number v = Fixnum v || Flonum v

externC FixnumToCint : Fixnum -> cint
externC (needContext, triggerGC) CintToNumber : cint -> Number
externC (needContext, triggerGC) CintToFixnum : cint -> Fixnum
externC (needContext, triggerGC) concat : (String, String) -> String
externC (needContext, triggerGC) CdoubleToNumber : cdouble -> Number
externC (needContext, triggerGC) FixnumToString : Fixnum -> String
externC (needContext, triggerGC) FlonumToString : Flonum -> String
externC (needContext, triggerGC) SpecialToString : Special -> String
externC (needContext, triggerGC) ObjectToString : JSValue -> String
externC (needContext, triggerGC) toString : JSValue -> String
externC (needContext, triggerGC) toCdouble :JSValue -> cdouble
externC (needContext, triggerGC) toNumber: JSValue -> Number
externC (needContext, triggerGC) toObject: JSValue -> JSObject
externC (needContext, triggerGC) getArrayProp: (Array, JSValue) -> JSValue
externC (needContext, triggerGC) getObjectProp: (JSObject, JSValue) -> JSValue
externC (needContext, triggerGC) SetArrayProp: (Array, JSValue, JSValue) -> void
externC (needContext, triggerGC) SetObjectProp: (JSObject, JSValue, JSValue) -> void
externC (needContext, triggerGC) Object_to_primitive_hint_number: JSObject -> JSValue

externC FixnumToCint: Fixnum -> cint
externC FlonumToCint: Flonum -> cint

externC FIXNUM_LESSTHAN: (Fixnum, Fixnum) -> cint
externC FIXNUM_LESSTHANEQ: (Fixnum, Fixnum) -> cint
externC FIXNUM_AND: (Fixnum, Fixnum) -> Fixnum

externC string_to_cstr: String -> Top
externC Strcmp: (Top, Top) -> cint
externC Half_fixnum_range: cint -> cint

externC IsFlonumInfinity: JSValue -> cint
externC IsFlonumNegInfinity : JSValue -> cint
externC IsFlonumNan : JSValue -> cint
externC Fixnum_Zero : void -> Fixnum

// int64_t のような型をどうするか
// lessthan と同じ

(vmInstruction, needContext)
lessthanequal : (JSValue, JSValue) -> Fixnum
lessthanequal (v1, v2) {
  top: match (v1, v2) {
    case (Fixnum v1 && Fixnum v2) {
      return FIXNUM_LESSTHANEQ(v1, v2) ? true : false;
    }
    case (number v1 && number v2) {
      cdouble x1 = toCdouble(v1);
      cdouble x2 = toCdouble(v2);
      return x1 <= x2 ? true : false;
    }
    case (String v1 && String v2) {
      // char* 型をどうするか
      return Strcmp(String_to_cstr(v1), String_to_cstr(v2)) <= 0 ? true : false;
    }
    case ((String v1 || Special v1) && (String v2 || Special v2)) {
      Number u1 = toNumber(v1);
      Number u2 = toNumber(v2);
      rematch top (u1, u2);
    }
    case ((String v1 || Special v1) && number v2) {
      Number u1 = toNumber(v1);
      rematch top (u1, v2);
    }
    case (number v1 && (String v1 || Special v1)) {
      Number u2 = toNumber(v2);
      rematch top (v1, u2);
    }
    case (object v1 && ffss v2) {
      JSValue u1 = Object_to_primitive_hint_number(v1);
      rematch top (u1, v2);
    }
    case (ffss v1 && object v2) {
      JSValue u2 = Object_to_primitive_hint_number(v2);
      rematch top (v1, u2);
    }
    case (true) {
      JSValue u1 = Object_to_primitive_hint_number(v1);
      JSValue u2 = Object_to_primitive_hint_number(v2);
      rematch top (u1, u2);
    }
  }
}