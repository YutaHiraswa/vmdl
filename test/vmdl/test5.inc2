pattern ffs v = Fixnum v || Flonum v || Special v
pattern ffss v = Fixnum v || Flonum v || Special v || String v
pattern object v = SimpleObject v || Array v || Function v || Builtin v || SimpleIterator v || Regexp v || StringObject v || NumberObject v || BooleanObject v

externC FixnumToCint : Fixnum -> cint
externC (needContext, triggerGC) CintToNumber : cint -> Number
externC (needContext, triggerGC) Concat : (String, String) -> String
externC (needContext, triggerGC) CdoubleToNumber : cdouble -> Number
externC (needContext, triggerGC) FixnumToString : Fixnum -> String
externC (needContext, triggerGC) FlonumToString : Flonum -> String
externC (needContext, triggerGC) SpecialToString : Special -> String
externC (needContext, triggerGC) ObjectToString : JSValue -> String


(needContext, triggerGC)
toString : JSValue -> String
toString (v) {
  top: match (v) {
   case (Fixnum v) {
     return FixnumToString(v);
   }
   case (Flonum v) {
     return FlonumToString(v);
   }
   case (Special v) {
     return SpecialToString(v);
   }
   case (String v) {
     return v;
   }
   case (true) {
     return ObjectToString(v);
   }
 }
}

(needContext, triggerGC)
toCdouble : JSValue -> cdouble
toCdouble (v) {
}

(vmInstruction, needContext, triggerGC, tailCall)
add : (JSValue, JSValue) -> JSValue
add (v1, v2) {
  top: match (v1, v2) {
    case (Fixnum v1 && Fixnum v2) {
      cint s = FixnumToCint(v1) + FixnumToCint(v2);
      return CintToNumber(s);
    }
    case (String v1 && ffs v2) {
      String s = toString(v2);
      rematch top(v1, s);  // v1:string, s:string
    }
    case (ffs v1 && String v2) {
      String s = toString(v1);
      rematch top(s, v2);  // s:string, v2:string
    }
    case (String v1 && String v2) {
      return Concat(v1, v2);
    }
    case (object v1 && ffss v2) {
      JSValue u1 = toString(v1);
      rematch top(u1, v2);  // u1:string, v2:LUB(ffss \cap type(v2)@top)
    }
    case (ffss v1 && object v2) {
      JSValue u2 = toString(v2);
      rematch top(v1, u2);  // v1:LUB(ffss \cap type(v1)@top), u2:string
    }
    case (true)
     {
      cdouble u1 = toCdouble(v1);
      cdouble u2 = toCdouble(v2);
      return CdoubleToNumber(u1 + u2);
    }
  }
}
